Step 1:

#region Krypton Variables
//Palette State
        private KryptonManager _manager = new KryptonManager();
        private PaletteBackInheritRedirect _paletteBack;
        private PaletteBorderInheritRedirect _paletteBorder;
        private PaletteContentInheritRedirect _paletteContent;
        //private IDisposable m_mementoContent;
        //private IDisposable m_mementoBack1;
        //private IDisposable m_mementoBack2;

        private IPalette _palette;
        private PaletteRedirect _paletteRedirect;
#endregion

Step 2:

#region Constructor
public SomeObject()
{
      //Create redirection object to the base palette
            if (((_palette != null)))
            {
                _palette.PalettePaint += new EventHandler<PaletteLayoutEventArgs>(OnPalettePaint);
            }
            KryptonManager.GlobalPaletteChanged += new EventHandler(OnGlobalPaletteChanged);
            _palette = KryptonManager.CurrentGlobalPalette;
            _paletteRedirect = new PaletteRedirect(_palette);

            //Create accessor objects for the back, border and content
            m_paletteBack = new PaletteBackInheritRedirect(_paletteRedirect);
            m_paletteBorder = new PaletteBorderInheritRedirect(_paletteRedirect);
            m_paletteContent = new PaletteContentInheritRedirect(_paletteRedirect);

            InitColours();
}
#endregion

Step 3:

 #region Krypton
        //Krypton Events
        private void OnPalettePaint(object sender, PaletteLayoutEventArgs e)
        {
            base.Invalidate();
        }

        private void OnGlobalPaletteChanged(object sender, EventArgs e)
        {
            if (((_palette != null)))
            {
                _palette.PalettePaint -= new EventHandler<PaletteLayoutEventArgs>(OnPalettePaint);
            }
            _palette = KryptonManager.CurrentGlobalPalette;
            _paletteRedirect.Target = _palette;
            if (((_palette != null)))
            {
                _palette.PalettePaint += new EventHandler<PaletteLayoutEventArgs>(OnPalettePaint);
                InitColours();
            }
            base.Invalidate();

        }


        private void InitColours()
        {
            BorderStyle = BorderStyle.None;
            KnobColour = _palette.ColorTable.OverflowButtonGradientBegin;
            KnobBorderColour = _palette.ColorTable.ToolStripGradientBegin;
            ForeColor = _palette.ColorTable.MenuItemText;
            KnobBackColour = _palette.ColorTable.MenuStripGradientBegin;
            MouseOverKnobColour = _palette.ColorTable.ButtonCheckedGradientBegin;
            MouseDownKnobColour = _palette.ColorTable.ButtonPressedGradientBegin;
            KnobIndicatorColourBegin = _palette.ColorTable.MenuStripGradientBegin;
            KnobIndicatorColourEnd = _palette.ColorTable.MenuStripGradientEnd;
            KnobIndicatorBorderColour = _palette.ColorTable.ToolStripGradientBegin;
        }
        #endregion